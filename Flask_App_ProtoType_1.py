# -*- coding: utf-8 -*-
"""flask_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oLgm7FhadNqS0oGTa_pGM20moMSB7Wk7
"""

#web app libraries
from flask import Flask,request,render_template,flash,url_for,redirect
from flask_ngrok import run_with_ngrok

#OS and Measure Time
import os
from time import perf_counter

#preprocessing libraries
from tensorflow.keras.preprocessing.image import load_img,img_to_array,array_to_img,save_img
import numpy as np
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical

# Model Loading Library
from tensorflow.keras.models import load_model

#path=os.getcwd()
#print(path)

"""#Delete Uploaded Images from server"""

def delete_img_folder():
  path_to_static=os.path.join(os.getcwd(),'static')
  if 'images'not in os.listdir(path_to_static):
    return None
  path_to_img_folder=os.path.join(os.getcwd(),'static','images')
  print(path_to_img_folder)
  imgs=os.listdir(path_to_img_folder)
  for i in imgs:
    rpath=os.path.join(path_to_img_folder,i)
    print(rpath)
    os.remove(rpath)
  os.rmdir(path_to_img_folder)

"""#Create Image Folder to store uploaded image"""

def make_img_folder():
  path_change=os.path.join(os.getcwd(),'static','images')
  #print(path_change)
  if not os.path.isdir(path_change):        
    os.mkdir(path_change)
    print(f'{path_change} dir created')
    return path_change

"""#Load Model"""

def load_PMD_model():
  path_to_model=os.path.join(os.getcwd(),'final_model_v1.h5')
  model=load_model(path_to_model)
  #model.summary()
  return model

"""#Get the Processed Image"""

def get_image(imageName):
  path_to_img=os.path.join(os.getcwd(),f'static/images/{imageName}')
  img=load_img(path_to_img)
  #display(img)
  img_arr=np.resize(img_to_array(img),[128,128,3])
  img_arr=img_arr.reshape(1,128,128,3).astype("Int32")
  return img_arr

"""#Decoder Function"""

def pmdDecoder(class_names):
  LE=LabelEncoder()
  #label encoding
  L_encd=LE.fit_transform(class_names)
  #print(L_encd)
  no_of_cls=len(L_encd)
  #onehot encoding on label encoded 
  ohEnc=to_categorical(L_encd,no_of_cls)
  pmdEnc={}
  for i,j in zip(class_names,ohEnc):
    pmdEnc[str(j)]=i
  print(pmdEnc)
  return pmdEnc

"""#Prediction Making Function"""

def predict_the_class(model,image):
  class_names=class_names=['forest','snow_covered_land','grass_land','buildings','water','barren_land']
  predicted_result_encoded=model.predict_proba(image)
  decoder=pmdDecoder(class_names)
  return decoder[str(predicted_result_encoded[0])]

"""#The PMD Flask App"""



app=Flask(__name__)
run_with_ngrok(app)

app.config['SECRET_KEY']="LoL 13 NoOne Can Guess This Key XD"
#app.config['DEBUG']=True
#app.config['IMAGE_UPLOAD']=make_img_folder()#os.path.join(os.getcwd(),'static','images')

@app.route('/')
def home_page():
  #path_to_images=make_img_folder()
  return render_template('index.html',val=False,msg="Upload an Image")

@app.route('/upload',methods=["POST","GET"])
def upload_img():
  if request.method=="POST":
    delete_img_folder()
    app.config['IMAGE_UPLOAD']=make_img_folder()#os.path.join(os.getcwd(),'static','images')
    k=False
    if request.files and request.files['myImage'].filename != '' :
      filename=request.files['myImage']
      print(filename)
      filename.save(os.path.join(app.config['IMAGE_UPLOAD'],filename.filename))
      k=True
      path='../static/images'
      path=os.path.join(path,filename.filename)
      print(f"path of the image : {path}")
      #path="../static/uploaded_images/"
      return render_template("img.html",fileName=path)
      #return render_template("index.html",val=k,msg="Plz Upload Again",sz=fSize(pathJoin(app.config['IMAGE_UPLOAD'],filename.filename))//(1024*1024))
    else:
      k=False
      return render_template("index.html",val=k,msg="Plz Upload Again" )
      #return render_template("img.html",fileName=path)
  else:
    return render_template('index.html',msg="Upload The Image")

@app.route('/predict')
def predict_my_image():
  image_name=os.listdir(app.config['IMAGE_UPLOAD'])
  print(image_name[0])
  #path_to_img=os.path.join(app.config['IMAGE_UPLOAD'],image_name)
  ans=predict_the_class(load_PMD_model(),get_image(image_name[0]))
  #delete_img_folder()
  return render_template('result.html',Ans=ans)

if __name__=="__main__":
  app.run()

